// This file is part of security-keys-rust. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT. No part of security-keys-rust, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2021 The developers of security-keys-rust. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT.


pub(in crate::pcsc) const SCARD_ATTR_VENDOR_NAME: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0100);
pub(in crate::pcsc) const SCARD_ATTR_VENDOR_IFD_TYPE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0101);
pub(in crate::pcsc) const SCARD_ATTR_VENDOR_IFD_VERSION: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0102);
pub(in crate::pcsc) const SCARD_ATTR_VENDOR_IFD_SERIAL_NO: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_INFO, 0x0103);
pub(in crate::pcsc) const SCARD_ATTR_CHANNEL_ID: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_COMMUNICATIONS, 0x0110);
pub(in crate::pcsc) const SCARD_ATTR_ASYNC_PROTOCOL_TYPES: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0120);
pub(in crate::pcsc) const SCARD_ATTR_DEFAULT_CLK: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0121);
pub(in crate::pcsc) const SCARD_ATTR_MAX_CLK: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0122);
pub(in crate::pcsc) const SCARD_ATTR_DEFAULT_DATA_RATE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0123);
pub(in crate::pcsc) const SCARD_ATTR_MAX_DATA_RATE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0124);
pub(in crate::pcsc) const SCARD_ATTR_MAX_IFSD: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0125);
pub(in crate::pcsc) const SCARD_ATTR_SYNC_PROTOCOL_TYPES: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_PROTOCOL, 0x0126);
pub(in crate::pcsc) const SCARD_ATTR_POWER_MGMT_SUPPORT: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_POWER_MGMT, 0x0131);
pub(in crate::pcsc) const SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SECURITY, 0x0140);
pub(in crate::pcsc) const SCARD_ATTR_USER_AUTH_INPUT_DEVICE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SECURITY, 0x0142);
pub(in crate::pcsc) const SCARD_ATTR_CHARACTERISTICS: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_MECHANICAL, 0x0150);

pub(in crate::pcsc) const SCARD_ATTR_CURRENT_PROTOCOL_TYPE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0201);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_CLK: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0202);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_F: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0203);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_D: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0204);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_N: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0205);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_W: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0206);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_IFSC: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0207);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_IFSD: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0208);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_BWT: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x0209);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_CWT: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x020a);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_EBC_ENCODING: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x020B);
pub(in crate::pcsc) const SCARD_ATTR_EXTENDED_BWT: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_IFD_PROTOCOL, 0x020C);

pub(in crate::pcsc) const SCARD_ATTR_ICC_PRESENCE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0300);
pub(in crate::pcsc) const SCARD_ATTR_ICC_INTERFACE_STATUS: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0301);
pub(in crate::pcsc) const SCARD_ATTR_CURRENT_IO_STATE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0302);
pub(in crate::pcsc) const SCARD_ATTR_ATR_STRING: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0303);
pub(in crate::pcsc) const SCARD_ATTR_ICC_TYPE_PER_ATR: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_ICC_STATE, 0x0304);

pub(in crate::pcsc) const SCARD_ATTR_ESC_RESET: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA000);
pub(in crate::pcsc) const SCARD_ATTR_ESC_CANCEL: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA003);
pub(in crate::pcsc) const SCARD_ATTR_ESC_AUTHREQUEST: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA005);
pub(in crate::pcsc) const SCARD_ATTR_MAXINPUT: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_VENDOR_DEFINED, 0xA007);

pub(in crate::pcsc) const SCARD_ATTR_DEVICE_UNIT: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0001);
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_IN_USE: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0002);
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_FRIENDLY_NAME_A: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0003);
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_SYSTEM_NAME_A: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0004);
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_FRIENDLY_NAME_W: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0005);
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_SYSTEM_NAME_W: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0006);
pub(in crate::pcsc) const SCARD_ATTR_SUPRESS_T1_IFS_REQUEST: DWORD = SCARD_ATTR_VALUE(SCARD_CLASS_SYSTEM, 0x0007);

/// Assumes ASCII.
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_FRIENDLY_NAME: DWORD = SCARD_ATTR_DEVICE_FRIENDLY_NAME_A;

/// Assumes ASCII.
pub(in crate::pcsc) const SCARD_ATTR_DEVICE_SYSTEM_NAME: DWORD = SCARD_ATTR_DEVICE_SYSTEM_NAME_A;
