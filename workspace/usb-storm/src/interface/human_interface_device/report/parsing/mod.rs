// This file is part of security-keys-rust. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT. No part of security-keys-rust, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2021 The developers of security-keys-rust. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT.


use crate::collections::Bytes;
use crate::collections::VecExt;
use crate::control_transfers::descriptors::get_human_interface_device_report_interface_descriptor;
use crate::control_transfers::descriptors::GetDescriptorError;
use crate::device::DeadOrAlive::Alive;
use crate::device::DeadOrAlive;
use crate::device::DeviceConnection;
use crate::device::ReusableBuffer;
use crate::interface::InterfaceNumber;
use crate::serde::AllocErrorRemote;
use crate::serde::TryReserveErrorRemote;
use crate::string::GetLocalizedStringError;
use crate::string::LocalizedStrings;
use likely::unlikely;
use serde::Deserialize;
use serde::Serialize;
use std::cmp::Ordering;
use std::error;
use std::fmt;
use std::fmt::Debug;
use std::fmt::Display;
use std::fmt::Formatter;
use std::collections::TryReserveError;
use std::convert::TryFrom;
use std::iter::FusedIterator;
use std::marker::PhantomData;
use std::mem::MaybeUninit;
use std::mem::take;
use std::mem::transmute;
use std::num::NonZeroU32;
use std::num::NonZeroU8;
use std::ops::Deref;
use std::ops::DerefMut;
use std::ops::RangeInclusive;
use std::ptr;
use std::rc::Rc;
use super::CollectionCommon;
use super::CollectionDescription;
use super::CollectionMainItem;
use super::CollectionReportItems;
use super::DesignatorIndex;
use super::InclusiveRange;
use super::LongItem;
use super::Report;
use super::ReportCount;
use super::ReportIdentifier;
use super::ReportItems;
use super::ReportSize;
use super::ReservedGlobalItem;
use super::ReservedLocalItem;
use super::ReservedLocalItemTag;
use super::ReservedMainItemTag;
use super::Usage;
use super::UsageIdentifier;
use super::UsagePage;
use super::units::PhysicalUnit;
use super::units::Unit;
use super::units::UnitExponent;
use swiss_army_knife::get_unchecked::GetUnchecked;
use swiss_army_knife::non_zero::new_non_zero_u8;
use swiss_army_knife::non_zero::new_non_zero_u32;
use std::alloc::AllocError;


include!("AlternateUsageParseError.rs");
include!("CollectionParseError.rs");
include!("DataWidth.rs");
include!("DelimitedLocalItemParseError.rs");
include!("DesignatorParseError.rs");
include!("GlobalItemParseError.rs");
include!("LocalItemParseError.rs");
include!("LongItemParseError.rs");
include!("LogicalExtentParseError.rs");
include!("ParsingGlobalItems.rs");
include!("ParsingLocalItems.rs");
include!("ParsingUsage.rs");
include!("ParsingUsageInclusiveRange.rs");
include!("ParsingUsageInclusiveRangeIterator.rs");
include!("ParsingUsagesLocalItems.rs");
include!("PhysicalExtentParseError.rs");
include!("ReportCountParseError.rs");
include!("ReportIdentifierParseError.rs");
include!("ReportSizeParseError.rs");
include!("ReportParseError.rs");
include!("ReportParser.rs");
include!("ShortItemType.rs");
include!("Stack.rs");
include!("StackError.rs");
include!("StringParseError.rs");
include!("UsagePageParseError.rs");
include!("UsageParseError.rs");

