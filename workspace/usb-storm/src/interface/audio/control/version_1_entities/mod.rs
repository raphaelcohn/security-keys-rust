// This file is part of security-keys-rust. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT. No part of security-keys-rust, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2021 The developers of security-keys-rust. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT.


use crate::Bytes;
use crate::VecExt;
use super::adjusted_index;
use super::adjusted_index_non_constant;
use super::Entity;
use super::Entities;
use super::EntityDescriptors;
use super::EntityDescriptorParseError;
use super::TerminalEntity;
use super::UnitEntity;
use super::parse_entity_descriptor;
use super::entity_identifiers::EntityIdentifier;
use super::entity_identifiers::TerminalEntityIdentifier;
use super::entity_identifiers::UnitEntityIdentifier;
use super::entity_identifiers::UnitOrTerminalEntityIdentifier;
use super::terminal_types::InputTerminalType;
use super::terminal_types::OutputTerminalType;
use enumflags2::bitflags;
use enumflags2::BitFlag;
use enumflags2::BitFlags;
use likely::unlikely;
use std::collections::HashSet;
use std::collections::TryReserveError;
use std::error;
use std::fmt;
use std::fmt::Debug;
use std::fmt::Display;
use std::fmt::Formatter;
use std::mem::{transmute, size_of};
use crate::string::GetLocalizedStringError;
use crate::string::LocalizedStrings;
use crate::string::StringFinder;
use crate::device::DeadOrAlive;
use crate::device::DeadOrAlive::Alive;
use crate::device::DeadOrAlive::Dead;
use indexmap::set::IndexSet;
use swiss_army_knife::non_zero::{new_non_zero_u8, new_non_zero_u16};
use swiss_army_knife::non_zero::new_non_zero_usize;
use std::ops::Deref;
use std::num::{NonZeroU8, NonZeroU16};
use std::num::NonZeroUsize;
use crate::interface::audio::control::DescriptorEntityMinimumLength;
use swiss_army_knife::get_unchecked::GetUnchecked;
use std::alloc::Global;


include!("AudioChannelFeatureControl.rs");
include!("DolbyProLogicMode.rs");
include!("InputLogicalAudioChannelClusters.rs");
include!("InputPinNumber.rs");
include!("LogicalAudioChannel.rs");
include!("LogicalAudioChannelCluster.rs");
include!("LogicalAudioChannelClusterParseError.rs");
include!("LogicalAudioChannelNumber.rs");
include!("LogicalAudioChannelSpatialLocation.rs");
include!("parse_control_size.rs");
include!("parse_p.rs");
include!("ProcessType.rs");
include!("Version1EntityDescriptorParseError.rs");
include!("Version1EntityDescriptors.rs");
include!("Version1FeatureUnitEntity.rs");
include!("Version1InputTerminalEntity.rs");
include!("Version1MixerUnitEntity.rs");
include!("Version1OutputTerminalEntity.rs");
include!("Version1ProcessingUnitEntity.rs");
include!("Version1SelectorUnitEntity.rs");
