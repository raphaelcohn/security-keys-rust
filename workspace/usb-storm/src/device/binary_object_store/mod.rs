// This file is part of security-keys-rust. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT. No part of security-keys-rust, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2021 The developers of security-keys-rust. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/security-keys-rust/master/COPYRIGHT.


use super::DeadOrAlive;
use super::DeadOrAlive::Alive;
use super::DeadOrAlive::Dead;
use super::DeviceHandle;
use crate::collections::Bytes;
use crate::collections::VecExt;
use crate::descriptors::DescriptorHeaderLength;
use crate::configuration::MaximumNumberOfConfigurations;
use crate::control_transfers::descriptors::get_binary_object_store_device_descriptor;
use crate::control_transfers::descriptors::GetStandardUsbDescriptorError;
use crate::integers::u1;
use crate::integers::u2;
use crate::integers::u4;
use crate::integers::u11;
use enumflags2::bitflags;
use likely::unlikely;
use serde::Deserialize;
use serde::Serialize;
use std::collections::TryReserveError;
use std::error;
use std::fmt;
use std::fmt::Debug;
use std::fmt::Display;
use std::fmt::Formatter;
use std::mem::MaybeUninit;
use std::mem::size_of;
use std::mem::transmute;
use swiss_army_knife::get_unchecked::GetUnchecked;
use uuid::Uuid;
use crate::version::Version;
use crate::version::VersionParseError;
use std::ops::Deref;
use crate::collections::WrappedIndexMap;
use crate::collections::WrappedIndexSet;
use crate::collections::WithCapacity;
use crate::collections::WrappedHashMap;
use crate::collections::WrappedBitFlags;
use crate::class_and_protocol::FunctionClass;
use crate::class_and_protocol::FunctionClassParseError;
use crate::string::WebUrl;
use crate::string::GetLocalizedStringError;
use crate::string::LocalizedStrings;
use crate::string::StringFinder;
use crate::string::GetWebUrlError;


include!("BillboardAlternateMode.rs");
include!("BillboardAlternateModeConfigurationResult.rs");
include!("BillboardAlternateModeDeviceCapability.rs");
include!("BillboardAlternateModeDeviceCapabilityParseError.rs");
include!("BillboardDeviceCapability.rs");
include!("BillboardDeviceCapabilityParseError.rs");
include!("BillboardDeviceContainerFailedBecause.rs");
include!("BillboardVconnPowerInWatts.rs");
include!("BinaryObjectStore.rs");
include!("BinaryObjectStoreBuffer.rs");
include!("BinaryObjectStoreParseError.rs");
include!("BitRate.rs");
include!("capability_descriptor_index.rs");
include!("ConfigurationSummaryDeviceCapability.rs");
include!("ConfigurationSummaryDeviceCapabilityParseError.rs");
include!("ContainerIdentifierDeviceCapability.rs");
include!("ContainerIdentifierDeviceCapabilityParseError.rs");
include!("DeviceCapability.rs");
include!("DeviceCapabilityParseError.rs");
include!("minimum_size.rs");
include!("PlatformDeviceCapability.rs");
include!("PlatformDeviceCapabilityParseError.rs");
include!("ReceiveOrTransmit.rs");
include!("SublinkProtocol.rs");
include!("SublinkSpeedAttribute.rs");
include!("SublinkSpeedAttributeIdentifier.rs");
include!("SublinkSpeedLinks.rs");
include!("SublinkType.rs");
include!("SublinkTypeSymmetry.rs");
include!("ReservedDeviceCapability.rs");
include!("SuperSpeedDeviceCapability.rs");
include!("SuperSpeedDeviceCapabilityParseError.rs");
include!("SuperSpeedDeviceCapabilitySupportedSpeed.rs");
include!("SuperSpeedPlusDeviceCapability.rs");
include!("SuperSpeedPlusDeviceCapabilityParseError.rs");
include!("Usb2ExtensionDeviceCapability.rs");
include!("Usb2ExtensionDeviceCapabilityParseError.rs");
include!("WebUsbPlatformDeviceCapability.rs");
include!("WebUsbPlatformDeviceCapabilityParseError.rs");
